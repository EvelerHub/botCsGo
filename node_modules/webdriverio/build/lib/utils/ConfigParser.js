'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _helpersDetectSeleniumBackend = require('../helpers/detectSeleniumBackend');

var _helpersDetectSeleniumBackend2 = _interopRequireDefault(_helpersDetectSeleniumBackend);

var DEFAULT_TIMEOUT = 10000;
var NOOP = function NOOP() {};
var DEFAULT_CONFIGS = {
    specs: [],
    exclude: [],
    logLevel: 'silent',
    coloredLogs: true,
    baseUrl: null,
    waitforTimeout: 1000,
    framework: 'mocha',
    reporter: 'dot',
    mochaOpts: {
        timeout: DEFAULT_TIMEOUT
    },
    jasmineNodeOpts: {
        defaultTimeoutInterval: DEFAULT_TIMEOUT
    },
    updateJob: true,
    maxInstances: 1,
    onPrepare: NOOP,
    before: NOOP,
    after: NOOP,
    onComplete: NOOP
};

var ConfigParser = (function () {
    function ConfigParser() {
        _classCallCheck(this, ConfigParser);

        this._config = DEFAULT_CONFIGS;
        this._capabilities = [];
    }

    /**
     * merges config file with default values
     * @param {String} filename path of file relative to current directory
     */

    _createClass(ConfigParser, [{
        key: 'addConfigFile',
        value: function addConfigFile(filename) {
            if (typeof filename !== 'string') {
                throw new Error('addConfigFile requires filepath');
            }

            var filePath = _path2['default'].resolve(process.cwd(), filename);

            try {
                var fileConfig = require(filePath).config;

                if (typeof fileConfig !== 'object') {
                    throw new Error('configuration file exports no config object');
                }

                /**
                 * merge capabilities
                 */
                this._capabilities = (0, _deepmerge2['default'])(this._capabilities, fileConfig.capabilities);
                delete fileConfig.capabilities;

                this._config = (0, _deepmerge2['default'])(this._config, fileConfig);

                /**
                 * detect Selenium backend
                 */
                this._config = (0, _deepmerge2['default'])((0, _helpersDetectSeleniumBackend2['default'])(this._config), this._config);
            } catch (e) {
                console.error('Failed loading configuration file: ', filePath);
                throw e;
            }
        }

        /**
         * merge external object with config object
         * @param  {Object} object  desired object to merge into the config object
         */
    }, {
        key: 'merge',
        value: function merge(object) {
            this._config = (0, _deepmerge2['default'])(this._config, object);

            /**
             * user and key could get added via cli arguments so we need to detect again
             * Note: cli arguments are on the right and overwrite config
             */
            this._config = (0, _deepmerge2['default'])((0, _helpersDetectSeleniumBackend2['default'])(this._config), this._config);
        }

        /**
         * get excluded files from config pattern
         */
    }, {
        key: 'getSpecs',
        value: function getSpecs(capSpecs, capExclude) {
            var specs = ConfigParser.getFilePaths(this._config.specs);
            var exclude = ConfigParser.getFilePaths(this._config.exclude);

            if (Array.isArray(capSpecs)) {
                specs = specs.concat(capSpecs);
            }
            if (Array.isArray(capExclude)) {
                exclude = exclude.concat(capExclude);
            }

            return specs.filter(function (spec) {
                return exclude.indexOf(spec) < 0;
            });
        }

        /**
         * return configs
         */
    }, {
        key: 'getConfig',
        value: function getConfig() {
            return this._config;
        }

        /**
         * return capabilities
         */
    }, {
        key: 'getCapabilities',
        value: function getCapabilities(i) {
            if (typeof i === 'number' && this._capabilities[i]) {
                return this._capabilities[i];
            }

            return this._capabilities;
        }

        /**
         * returns a flatten list of globed files
         *
         * @param  {String[]} filenames  list of files to glob
         * @return {String[]} list of files
         */
    }], [{
        key: 'getFilePaths',
        value: function getFilePaths(patterns, omitWarnings) {
            var files = [];

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = _getIterator(patterns), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var pattern = _step.value;

                    var filenames = _glob2['default'].sync(pattern);

                    filenames = filenames.filter(function (path) {
                        return path.slice(-3) === '.js' || path.slice(-8) === '.feature' || path.slice(-7) === '.coffee';
                    });

                    filenames = filenames.map(function (path) {
                        return process.cwd() + '/' + path;
                    });

                    if (filenames.length === 0 && !omitWarnings) {
                        console.warn('pattern', pattern, 'did not match any file');
                    }

                    files = (0, _deepmerge2['default'])(files, filenames);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return files;
        }
    }]);

    return ConfigParser;
})();

exports['default'] = ConfigParser;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,
